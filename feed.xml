<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robin Smith - Freelance Developer</title>
    <description>Experienced freelance software developer designing and building custom web applications and integrations using modern cloud technologies and frameworks.
</description>
    <link>https://rsmith.io/</link>
    <atom:link href="https://rsmith.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 27 Aug 2015 00:11:14 +0100</pubDate>
    <lastBuildDate>Thu, 27 Aug 2015 00:11:14 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>ConsoleWriter jQuery Plugin</title>
        <description>&lt;h2 class=&quot;console-writer&quot; cw-sound=&quot;true&quot; cw-animation=&quot;true&quot;&gt;Edit Me!&lt;/h2&gt;

&lt;p&gt;I wanted to create a console-like typing effect on a heading element, with the heading firstly 
appearing character by character as if being typed in at a developer&amp;#39;s console. This sort of thing has already been done
as in &lt;a href=&quot;http://www.mattboldt.com/demos/typed-js/&quot;&gt;Typed.js&lt;/a&gt;,
&lt;a href=&quot;http://codepen.io/voronianski/pen/aicwk&quot;&gt;typeWriter.js&lt;/a&gt; or
&lt;a href=&quot;https://github.com/fardjad/realistic-typewriter.js&quot;&gt;realistic-typewriter.js&lt;/a&gt;. As with most ideas in the JS
world or software world, it is fair to say that this idea has been done before.&lt;/p&gt;

&lt;p&gt;My main motivation for the project was to gain familiarity with using jQuery and I believe that embarking on a pet
project is the best, most fun and most productive way to learn a new programming language or framework. &lt;/p&gt;

&lt;p&gt;The main objective I wanted to achieve was actually to allow the site visitor to modify the heading element by focusing it,
deleting existing characters and typing whatever they wanted into the element, complete with a blinking cursor at the end
of the line as in a terminal. I also added keyboard typing sounds to heighten the effect. Try it now by clicking any of
the headings within this blog article.&lt;/p&gt;

&lt;h2 class=&quot;console-writer&quot; cw-typing-sound=&quot;true&quot;&gt;ConsoleWriter&lt;/h2&gt;

&lt;p&gt;I packaged the project up as a jQuery plugin: &lt;a href=&quot;https://github.com/robinrob/consolewriter.jquery.js&quot;&gt;ConsoleWriter&lt;/a&gt;,
designed with a focus on user-friendliness and configurability using options. The heading above this paragraph displays the default method of usage which requires
just adding the &lt;code&gt;console-writer&lt;/code&gt; class to the element. Reload the page again to see the typewriter effect. The &lt;code&gt;readme&lt;/code&gt;
file included in the repo describes the options and how to set them. There is also a &lt;code&gt;demo.html&lt;/code&gt; file which shows
example usages.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jul 2015 00:00:00 +0100</pubDate>
        <link>https://rsmith.io/blog/console-writer-jquery-plugin</link>
        <guid isPermaLink="true">https://rsmith.io/blog/console-writer-jquery-plugin</guid>
        
        
      </item>
    
      <item>
        <title>Jekyll Gulp HAML SASS BrowserSync</title>
        <description>&lt;p&gt;Whilst using Github&amp;#39;s Jekyll framework to build a static website, I noticed a lack of built-in HAML support. I am a big fan of using HAML to produce HTML. Apart from this lack of support for HAML, I enjoy using Jekyll.&lt;/p&gt;

&lt;p&gt;Since I was using Gulp to manage the build process, I needed a Gulp task to handle the HAML preprocessing. I initially tried using the &lt;a href=&quot;https://www.npmjs.com/package/gulp-haml&quot;&gt;gulp-haml&lt;/a&gt; module in my HAML task, but it produced incorrect results a few times. I came across the node module &lt;a href=&quot;https://github.com/moneypenny/gulp-ruby-haml&quot;&gt;gulp-ruby-haml&lt;/a&gt;, which is a wrapper on the Ruby gem &lt;a href=&quot;https://rubygems.org/gems/haml&quot;&gt;haml&lt;/a&gt;, and which gives accurate results.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;HAML Processing&lt;/h2&gt;

&lt;p&gt;HAML files reside inside a &lt;code&gt;_haml&lt;/code&gt; folder which sits at the location of the resultant HTML files. For example:
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;project-root
        index
                _haml
                        index.haml
                index.html
        _includes
                _haml
                        footer.haml
                        head.haml
                        nav.haml
                footer.html
                head.html
                nav.html
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The HAML build task is actually fairly slow compared to the CSS or Javascript processing tasks. It can take up to 10 seconds to process all of the HAML in the project. This is unacceptable when rebuilding on-the-fly while making changes.&lt;/p&gt;

&lt;p&gt;To avoid slow build times, I use a separate &lt;code&gt;haml-watch&lt;/code&gt; task that watches the HAML files for changes, then only processes the files that changed. The stream is then piped into the code for compiling the HAML, which is contained in the function &lt;code&gt;hamlBuild()&lt;/code&gt;. This stream-piping step makes use of &lt;a href=&quot;https://www.npmjs.com/package/stream-combiner2&quot;&gt;stream-combiner2&lt;/a&gt;. Below is the code for both HAML tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var haml = require(&#39;gulp-ruby-haml&#39;)
var combiner = require(&#39;stream-combiner2&#39;)

...

var config = {
    paths: {
        ...
        haml: {
            src: [&#39;**/_haml/*.haml&#39;]
        },
        ...
    }
}

...

/* hamlBuild() contains the shared build logic used by haml-watch and haml-build */
function hamlBuild() {
    return combiner(
        haml(),
        rename(function (path) {
            path.dirname += &#39;/../&#39;
        })
    )
}

/* Watch and compile only changed HAML files to HTML.
 * haml-watch has its own task to avoid doing a full HAML build on each .haml file change, since a full HAML build
 * can be quite slow.
 */
gulp.task(&#39;haml-watch&#39;, function () {
    gulp.src(config.paths.haml.src, {read: false})
        .pipe(watch(config.paths.haml.src))
        .pipe(hamlBuild())
        .pipe(gulp.dest(&#39;./&#39;))
})

/* Compile all HAML files to HTML. */
gulp.task(&#39;haml-build&#39;, function () {
    return gulp.src(config.paths.haml.src)
        .pipe(hamlBuild())
        .pipe(gulp.dest(&#39;./&#39;))
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Full Site Template&lt;/h2&gt;

&lt;p&gt;Whilst researching Jekyll, I noticed a few other people sharing their Jekyll setups as site templates. Here is my own &lt;a href=&quot;https://github.com/robinrob/jekyll-gulp-haml-sass-browsersync.git&quot;&gt;jekyll-gulp-haml-sass-browsersync&lt;/a&gt; template which includes my full &lt;a href=&quot;https://github.com/robinrob/jekyll-gulp-haml-sass-browsersync/blob/master/gulpfile.js&quot;&gt;Gulpfile&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2015 00:00:00 +0100</pubDate>
        <link>https://rsmith.io/blog/jekyll_gulp_haml_sass_browsersync</link>
        <guid isPermaLink="true">https://rsmith.io/blog/jekyll_gulp_haml_sass_browsersync</guid>
        
        
      </item>
    
      <item>
        <title>RSS Reader Script</title>
        <description>&lt;p&gt;I wanted a quick, lightweight way to browse and open articles from RSS feeds from within the terminal. I wrote a short
&lt;a href=&quot;git@github.com:robinrob/rss-opener.git&quot;&gt;Ruby script&lt;/a&gt; for quickly opening RSS feed articles in a web browser.&lt;/p&gt;

&lt;h2&gt;Screenshot&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/rss-opener.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Further details on its usage are given in the README file in the project.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 00:00:00 +0100</pubDate>
        <link>https://rsmith.io/blog/rss-feed-reader</link>
        <guid isPermaLink="true">https://rsmith.io/blog/rss-feed-reader</guid>
        
        
      </item>
    
      <item>
        <title>Fast Javascript Variable Debugging</title>
        <description>&lt;p&gt;Note: when debugging Javascript in the browser, it&amp;#39;s usually best to just use the Chrome dev tools for this!&lt;/p&gt;

&lt;p&gt;Besides using a browser&amp;#39;s dev tools whilst debugging Javascript, you still may find yourself needing to quickly print
the contents of an object out to the console. You may be writing a short Node script in a text editor for example.
Printing out the contents of an object involves typing something like the following - for example to display the
contents of the object referenced by variable &lt;code&gt;myVar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;console.log(&#39;myVar: &#39; + JSON.stringify(myVar, null, &#39;\t&#39;))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a pretty unwieldy line and when debugging an unfamiliar piece of code you could waste a lot of time typing or even
copy-pasting this and subsequently modifying it.&lt;/p&gt;

&lt;p&gt;Since I use the command-line and my ZSH environment as a swiss-army knife in all that I do, I
wrote a quick little shell function to do the work of constructing the above useful snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;zsh&quot;&gt;function console_log_json () {
    local +r Variable=$1
    
    copy_print &quot;console.log(&#39;$Variable: &#39; + JSON.stringify($Variable, null, &#39;\  &#39;))&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;copy_print&lt;/code&gt; is the following shell function (requires &lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; programs):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;zsh&quot;&gt;function copy_print () {
    # printf is necessary here because print does not print a string containing only
    # the character &#39;-&#39;, no matter how many times the string contains it.
    printf $@ | pbcopy &amp;&amp; pbpaste
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The workflow goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;See a variable that you&amp;#39;d really like to check the contents of when you run your app, e.g. &lt;code&gt;myVar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch focus to the terminal (I use a hot-key: cmd + caps-lock)&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;console_log_json&lt;/code&gt; (or alias of - i use &lt;code&gt;logj&lt;/code&gt; for example) then name of variable: &lt;code&gt;logj myVar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Switch focus back to the editor and paste the snippet which should be in the clipboard: &lt;code&gt;console.log(&amp;#39;myvar: &amp;#39; + JSON.stringify(myvar, null, &amp;#39;\t&amp;#39;))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is pretty snappy when you need it! And can be made arbitrarily complex or &amp;#39;pretty&amp;#39; of course.&lt;/p&gt;

&lt;p&gt;The point of this post is to demonstrate the fun of automating out repetetive actions that you may find yourself making,
and the usefulness of the command-line plus shell environment in this.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 May 2015 00:00:00 +0100</pubDate>
        <link>https://rsmith.io/blog/console-log-json-stringify</link>
        <guid isPermaLink="true">https://rsmith.io/blog/console-log-json-stringify</guid>
        
        
      </item>
    
  </channel>
</rss>
