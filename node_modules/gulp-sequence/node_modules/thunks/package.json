{
  "name": "thunks",
  "description": "A small and magical async control flow tool, wrap promise, generator and anything to thunk.",
  "authors": [
    "Yan Qing <admin@zensh.com>"
  ],
  "version": "2.7.3",
  "main": "thunks.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:thunks/thunks.git"
  },
  "homepage": "https://github.com/thunks/thunks",
  "keywords": [
    "async",
    "thunk",
    "thunks",
    "Promise",
    "flow",
    "yield",
    "generator",
    "coro",
    "coroutine"
  ],
  "dependencies": {},
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-jshint": "^1.9.4",
    "gulp-mocha": "^2.0.1",
    "gulp-sequence": "^0.3.2",
    "jsbench": "^0.5.1",
    "mocha": "^2.2.1",
    "should": "^5.2.0",
    "thenjs": ">=1.5.0",
    "async": ">=0.9.0",
    "bluebird": ">=2.9.21",
    "co": ">=4.5.1",
    "rsvp": ">=3.0.18",
    "when": ">=3.7.2"
  },
  "scripts": {
    "test": "node --harmony `which gulp`"
  },
  "ignore": [
    "**/.*",
    "benchmark",
    "test",
    "examples",
    "docs",
    "gulpfile.js",
    "bower.json",
    "component.json"
  ],
  "readme": "thunks\n====\nA small and magical async control flow tool, wrap promise, generator and anything to thunk.\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Talk topic][talk-image]][talk-url]\n\n[中文说明](https://github.com/thunks/thunks/blob/master/README_zh.md)\n\n[thunks 的作用域和异常处理设计](https://github.com/thunks/thunks/blob/master/docs/scope-and-error-catch.md)\n\n## Compatibility\n\nES3+, support node.js and all browsers.\n\n## Implementations:\n\n- [Toa](https://github.com/toajs/toa): A powerful web framework rely on thunks.\n- [thunk-redis](https://github.com/thunks/thunk-redis) A thunk/promise-based redis client with pipelining and cluster.\n- [thunk-stream](https://github.com/thunks/thunk-stream) Wrap a readable/writable/duplex/transform stream to a thunk.\n- [thunk-queue](https://github.com/thunks/thunk-queue) Thunk queue for uncertainty tasks evaluation.\n- [file-cache](https://github.com/thunks/file-cache) Read file with caching, rely on thunks.\n\nAnd a mountain of applications in server-side or client-side.\n\n## What is a thunk?\n\n1. **`thunk`** is a function that encapsulates synchronous or asynchronous code inside.\n\n2. **`thunk`** accepts only one `callback` function as an arguments, which is a CPS function;\n\n3. **`thunk`** returns another **`thunk`** function after being called, for chaining operations;\n\n4. **`thunk`** would passing the results into a `callback` function after excuted.\n\n5. If `callback` returns a new **`thunk`** function, then it would be send to another **`thunk`** to excute,\nor it would be send to another new **`thunk`** function as the value of the computation.\n\n## Benchmark\n\n```js\n➜  thunks git:(master) ✗ node benchmark/index\nAsync Benchmark...\n\nJSBench Start (1000 cycles, async mode):\nTest Promise...\nTest co...\nTest thunks-generator...\nTest bluebird...\nTest when...\nTest RSVP...\nTest async...\nTest thenjs...\nTest thunks...\n\nJSBench Results:\nPromise: 1000 cycles, 34.467 ms/cycle, 29.013 ops/sec\nco: 1000 cycles, 29.833 ms/cycle, 33.520 ops/sec\nthunks: 1000 cycles, 15.671 ms/cycle, 63.812 ops/sec\nthunks-generator: 1000 cycles, 14.268 ms/cycle, 70.087 ops/sec\nbluebird: 1000 cycles, 12.722 ms/cycle, 78.604 ops/sec\nRSVP: 1000 cycles, 10.06 ms/cycle, 99.404 ops/sec\nwhen: 1000 cycles, 9.708 ms/cycle, 103.008 ops/sec\nasync: 1000 cycles, 8.755 ms/cycle, 114.220 ops/sec\nthenjs: 1000 cycles, 5.597 ms/cycle, 178.667 ops/sec\n\nPromise: 100%; co: 115.53%; thunks: 219.94%; thunks-generator: 241.57%; bluebird: 270.92%; RSVP: 342.61%; when: 355.04%; async: 393.68%; thenjs: 615.81%;\n\nJSBench Completed!\n```\n\n## Demo\n\n```js\nvar Thunk = require('../thunks.js')();\nvar fs = require('fs');\n\nvar size = Thunk.thunkify(fs.stat);\n\n// sequential\nsize('.gitignore')(function (error, res) {\n  console.log(error, res);\n  return size('thunks.js');\n\n})(function (error, res) {\n  console.log(error, res);\n  return size('package.json');\n\n})(function (error, res) {\n  console.log(error, res);\n})\n\n// parallel\nThunk.all([size('.gitignore'), size('thunks.js'), size('package.json')])(function (error, res) {\n  console.log(error, res);\n})\n\n// sequential\nThunk.seq([size('.gitignore'), size('thunks.js'), size('package.json')])(function (error, res) {\n  console.log(error, res);\n})\n```\n\n```js\nvar Thunk = require('../thunks.js')();\nvar fs = require('fs');\n\nvar size = Thunk.thunkify(fs.stat);\n\n\n// generator\nThunk(function* () {\n\n  // sequential\n  console.log(yield size('.gitignore'));\n  console.log(yield size('thunks.js'));\n  console.log(yield size('package.json'));\n\n})(function* (error, res) {\n  //parallel\n  console.log(yield [size('.gitignore'), size('thunks.js'), size('package.json')]);\n})();\n```\n\n## Installation\n\n**Node.js:**\n\n    npm install thunks\n\n**Bower:**\n\n    bower install thunks\n\n**browser:**\n\n```html\n<script src=\"/pathTo/thunks.js\"></script>\n```\n\n## API\n\n```js\nvar thunks = require('thunks');\n```\n\n### thunks([options])\n\nGenerator of `thunks`, it generates the main function of `Thunk` with its scope.\n\"scope\" refers to the running evironments `Thunk` generated(directly or indirectly) for all `thunk` functions.\n\n1. Here's how you create a basic `Thunk`, any exceptions would be passed the next `thunk` function:\n\n    ```js\n    var Thunk = thunks();\n    ```\n\n2. Here's the way to create a `Thunk` listening to all exceptions in current scope with `onerror`,\nand it will make sure the exeptions not being passed to the followed `thunk` function, unless `onerror` function return `true`.\n\n    ```js\n    var Thunk = thunks(function (error) { console.error(error); });\n    ```\n\n3. Create a `Thunk` with `onerror` and `debug` listeners.\nResults of this `Thunk` would be passed to `debug` function first before passing to the followed `thunk` function.\n\n    ```js\n    var Thunk = thunks({\n      onerror: function (error) { console.error(error); },\n      debug: function () { console.log.apply(console, arguments); }\n    });\n    ```\n\nEven multiple `Thunk` main functions with diferent scope are composed,\neach scope would be seperated from each other,\nwhich means, `onerror` and `debug` would not run in other scopes.\n\n### Thunk(start)\n\nThis is the main function, to create new `thunk` functions.\n\nThe parameter `start` could be:\n\n1. a `thunk` function, by calling this function a new `thunk` function will be returned\n\n    ```js\n    var thunk1 = Thunk(1);\n    var thunk2 = Thunk(thunk1); // thunk2 equals to thunk1;\n    ```\n\n2. `function (callback) {}`, by calling it, results woule be gathered and be passed to the next `thunk` function\n\n    ```js\n    Thunk(function (callback) {\n      callback(null, 1)\n    })(function (error, value) {\n      console.log(error, value); // null 1\n    });\n    ```\n\n3. a Promise object, results of Promise would be passed to a new `thunk` function\n\n    ```js\n    var promise = Promise.resolve(1);\n\n    Thunk(promise)(function (error, value) {\n      console.log(error, value); // null 1\n    });\n    ```\n\n4. objects which implements methods of `toThunk`\n\n    ```js\n    var then = Thenjs(1); // then.toThunk() return a thunk function\n\n    Thunk(then)(function (error, value) {\n      console.log(error, value); // null 1\n    });\n    ```\n\n5. Generator and Generator Function, like `co`, and `yield` anything\n\n    ```js\n    Thunk(function* () {\n      var x = yield 10;\n      return 2 * x;\n    })(function* (error, res) {\n      console.log(error, res); // null, 20\n\n      return yield [1, 2, Thunk(3)];\n    })(function* (error, res) {\n      console.log(error, res); // null, [1, 2, 3]\n      return yield {\n        name: 'test',\n        value: Thunk(1)\n      };\n    })(function (error, res) {\n      console.log(error, res); // null, {name: 'test', value: 1}\n    });\n    ```\n\n6. values in other types would be valid results passing to a new `thunk` function\n\n    ```js\n    Thunk(1)(function (error, value) {\n      console.log(error, value); // null 1\n    });\n\n    Thunk([1, 2, 3])(function (error, value) {\n      console.log(error, value); // null [1, 2, 3]\n    });\n    ```\n\nYou can also run with `this`:\n\n    ```js\n    Thunk.call({x: 123}, 456)(function (error, value) {\n      console.log(error, this.x, value); // null 123 456\n      return 'thunk!';\n    })(function (error, value) {\n      console.log(error, this.x, value); // null 123 'thunk!'\n    });\n    ```\n\n### Thunk.all(obj)\n### Thunk.all(thunk1, ..., thunkX)\n\nReturns a `thunk` function.\n\n`obj` can be an array or an object that contains any value. `Thunk.all` will transform value to a `thunk` function and excuted it in parallel. After all of them are finished, an array containing results(in its original order) would be passed to the a new `thunk` function.\n\n```js\nThunk.all([\n  Thunk(0),\n  function* () { return yield 1; },\n  2,\n  Thunk(function (callback) { callback(null, [3]); })\n])(function (error, value) {\n  console.log(error, value); // null [0, 1, 2, [3]]\n});\n\nThunk.all({\n  a: Thunk(0),\n  b: Thunk(1),\n  c: 2,\n  d: Thunk(function (callback) { callback(null, [3]); })\n})(function (error, value) {\n  console.log(error, value); // null {a: 0, b: 1, c: 2, d: [3]}\n});\n```\n\nYou may also write code like this:\n\n```js\nThunk.all.call({x: [1, 2, 3]}, [4, 5, 6])(function (error, value) {\n  console.log(error, this.x, value); // null [1, 2, 3] [4, 5, 6]\n  return 'thunk!';\n})(function (error, value) {\n  console.log(error, this.x, value); // null [1, 2, 3] 'thunk!'\n});\n```\n\n### Thunk.seq([thunk1, ..., thunkX])\n### Thunk.seq(thunk1, ..., thunkX)\n\nReturns a `thunk` function.\n\n`thunkX` can be any value, `Thunk.seq` will transform value to a `thunk` function and excuted it in order. After all of them are finished, an array containing results(in its original order) would be passed to the a new `thunk` function.\n\n```js\nThunk.seq([\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'a', 'b');\n    }, 100);\n  },\n  Thunk(function (callback) {\n    callback(null, 'c');\n  }),\n  [Thunk('d'), function* () { return yield 'e'; }], // thunk in array will be excuted in parallel\n  function (callback) {\n    should(flag).be.eql([true, true]);\n    flag[2] = true;\n    callback(null, 'f');\n  }\n])(function (error, value) {\n  console.log(error, value); // null [['a', 'b'], 'c', ['d', 'e'], 'f']\n});\n```\nor\n\n```js\nThunk.seq(\n  function (callback) {\n    setTimeout(function () {\n      callback(null, 'a', 'b');\n    }, 100);\n  },\n  Thunk(function (callback) {\n    callback(null, 'c');\n  }),\n  [Thunk('d'), Thunk('e')], // thunk in array will be excuted in parallel\n  function (callback) {\n    should(flag).be.eql([true, true]);\n    flag[2] = true;\n    callback(null, 'f');\n  }\n)(function (error, value) {\n  console.log(error, value); // null [['a', 'b'], 'c', ['d', 'e'], 'f']\n});\n```\n\nYou may also write code like this:\n\n```js\nThunk.seq.call({x: [1, 2, 3]}, 4, 5, 6)(function (error, value) {\n  console.log(error, this.x, value); // null [1, 2, 3] [4, 5, 6]\n  return 'thunk!';\n})(function (error, value) {\n  console.log(error, this.x, value); // null [1, 2, 3] 'thunk!'\n});\n```\n\n### Thunk.race([thunk1, ..., thunkX])\n### Thunk.race(thunk1, ..., thunkX)\n\nReturns a `thunk` function with the value or error from one first completed.\n\n### Thunk.digest(error, val1, val2, ...)\n\nReturns a `thunk` function.\n\nTransform a Node.js callback function into a `thunk` function.\nThis `thunk` function retuslts in `(error, val1, val2, ...)`, which is just being passed to a new `thunk` function,\nlike:\n\n```js\nThunk(function (callback) {\n  callback(error, val1, val2, ...);\n})\n```\n\nOne use case:\n\n```js\nThunk(function (callback) {\n  //...\n  callback(error, result);\n})(function (error, value) {\n  //...\n  return Thunk.digest(error, value);\n})(function (error, value) {\n  //...\n});\n```\n\nYou may also write code with `this`：\n\n```js\nvar a = {x: 1};\nThunk.digest.call(a, null, 1, 2)(function (error, value1, value2) {\n  console.log(this, error, value1, value2) // { x: 1 } null 1 2\n});\n```\n\n### Thunk.thunkify(fn)\n\nReturns a new function that would return a `thunk` function\n\nTransform a `fn` function which is in Node.js style into a new function.\nThis new function does not accept `callback` as arguments, but accepts `thunk` functions.\n\n```js\nvar Thunk = require('../thunks.js')();\nvar fs = require('fs');\nvar fsStat = Thunk.thunkify(fs.stat);\n\nfsStat('thunks.js')(function (error, result) {\n  console.log('thunks.js: ', result);\n});\nfsStat('.gitignore')(function (error, result) {\n  console.log('.gitignore: ', result);\n});\n```\n\nYou may also write code with `this`:\n\n```js\nvar obj = {a: 8};\nfunction run(x, callback) {\n  //...\n  callback(null, this.a * x);\n};\n\nvar run = Thunk.thunkify.call(obj, run);\n\nrun(1)(function (error, result) {\n  console.log('run 1: ', result);\n});\nrun(2)(function (error, result) {\n  console.log('run 2: ', result);\n});\n```\n\n### Thunk.delay(delay)\n\nReturn a `thunk` function, this `thunk` function will be called after `delay` milliseconds.\n\n```js\nconsole.log('Thunk.delay 500: ', Date.now());\nThunk.delay(500)(function () {\n  console.log('Thunk.delay 1000: ', Date.now());\n  return Thunk.delay(1000);\n})(function () {\n  console.log('Thunk.delay end: ', Date.now());\n});\n```\n\nYou may also write code with `this`:\n\n```js\nconsole.log('Thunk.delay start: ', Date.now());\nThunk.delay.call(this, 1000)(function () {\n  console.log('Thunk.delay end: ', Date.now());\n});\n```\n\n### Thunk.stop([messagge])\n\nThis will stop thunk function with a message similar to Promise's cancelable(not implement yet). It will throw a stop signal object.\nStop signal is a Error object with a message and `status === 19`(POSIX signal SIGSTOP) and a special code, stop signal can be caught by `debug`.\n\n```js\nvar Thunk = require('thunks')({\n  debug: function(res) {\n    if (res) console.log(res); // { [Error: Stop now!] code: {}, status: 19 }\n  }\n});\n\nThunk(function(callback) {\n  Thunk.stop('Stop now!');\n  console.log('It will not be run!');\n})(function(error, value) {\n  console.log('It will not be run!');\n});\n```\n\n```js\nThunk.delay(100)(function() {\n  console.log('Hello');\n  return Thunk.delay(100)(function() {\n    Thunk.stop('Stop now!');\n    console.log('It will not be run!');\n  });\n})(function(error, value) {\n  console.log('It will not be run!');\n});\n```\n\n## Who's using\n\n+ Teambition community: https://bbs.teambition.com/ use in server-side and client-side\n\n[npm-url]: https://npmjs.org/package/thunks\n[npm-image]: http://img.shields.io/npm/v/thunks.svg\n\n[travis-url]: https://travis-ci.org/thunks/thunks\n[travis-image]: http://img.shields.io/travis/thunks/thunks.svg\n\n[talk-url]: https://guest.talk.ai/rooms/d1ccbf802n\n[talk-image]: https://img.shields.io/talk/t/d1ccbf802n.svg\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thunks/thunks/issues"
  },
  "_id": "thunks@2.7.3",
  "dist": {
    "shasum": "97a4a8f479f1cac93e83ff9098d3530daf6fed94"
  },
  "_from": "thunks@^2.7.2",
  "_resolved": "https://registry.npmjs.org/thunks/-/thunks-2.7.3.tgz"
}
