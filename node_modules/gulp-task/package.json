{
  "name": "gulp-task",
  "version": "2.0.2",
  "description": "A wrapper of gulp.task that enables promise-based dependency management",
  "main": "bin/index.js",
  "scripts": {
    "test": "echo \"Error: Im very sorry for not writing tests. I am ashamed.\" && exit 1"
  },
  "keywords": [
    "gulp",
    "task",
    "promise",
    "dependency",
    "dependencies"
  ],
  "author": {
    "name": "Tim Huff"
  },
  "license": "ISC",
  "dependencies": {
    "bluebird": "^2.8.1",
    "colors": "^1.0.3",
    "gulp": "^3.8.10",
    "gulp-callback": "0.0.3",
    "gulp-foreach": "^0.1.0"
  },
  "homepage": "https://github.com/timhuff/gulp-task",
  "bugs": {
    "url": "https://github.com/timhuff/gulp-task"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/timhuff/gulp-task.git"
  },
  "devDependencies": {
    "gulp": "^3.8.10",
    "gulp-coffee": "^2.2.0"
  },
  "readme": "\n# gulp-task\n\n# Basic Info\n## Preface\n\nThis module is currently under heavy development. If you include it in your project, lock down the version number.\n\nThis was written as a wrapper for gulp.task in order to get promise-based dependency management.\n\nThe documentation and source is written in coffeescript but it should work with vanilla gulp just the same.\n\nUnfortunately, I don't have time to write tests at the moment.\n\n## Installation\n```shell\nnpm install --save gulp-task\n```\n```coffee\ntask = require 'gulp-task'\n```\nOptionally, you can configure it to automatically register gulp tasks:\n```coffee\ntask.configure gulp\n```\n## API\nThis module has 4 functions. Here is the order that you'll most likely use them:\n- `task.configure`\n- `task`\n- `task.run`\n- `task.watch`\n- `task.getTaskNames`\n\n### task.configure(gulp)\nThis makes it so that when you run task(name, cb), you also register the same task with gulp, enabling command line execution.\n### task(name, cb)\nThis registers a new task to later be run via task.run. Dependencies are taken care of via promises.\n### task.run(name|cb)\nThis accepts either the name of a previously registered task or an anonymous function.\n### task.getTaskNames()\nThis simply returns a sorted list the names of registered tasks.\n\n# Notes\n\n## A Note About Not Running `task.configure`\nThis module was written as a replacement for `gulp.task`. You're still free to use gulp.task directly but those tasks registered via `gulp.task` will not be visible via `task.run`. A usage where you don't run `task.configure gulp` might looks something like:\n```\ngulp.task 'build', ->\n\ttask.run 'compile'\n\t.then -> task.run 'copy'\ntask 'compile', -> #compile code\ntask 'copy', -> #copy code\n```\nIn this case, you'd be able to run `coffeegulp build` from command-line but not `coffeegulp compile` or `coffeegulp copy`.  \nThis \"private task\" effect is why configuring was made optional.\n\n## A Note About Tasks\n`task.run` returns a `Promise`. How that promise is resolved depends on the return value of the function being run.\n\nRegardless of if you're running an anonymous function or calling a registered one by name, the nature of the returned promise falls into three cases.\n### Case 1: Task Returns a Promise\nThis is simple enough. `task.run` simply returns the promise.\n### Case 2: Task Returns a Stream\n`task.run` returns a promise that resolves via `.pipe gulpCallback -> resolve stream`\n### Case 3: Task Returns Something Else\nIn this event, `task.run` simply returns a resolved promise after running the task.\n\n## A Note About `.then -> gulp.src`\nLet's say that you're defining a task that does some stuff via task.run and then calls `.then` on the promise and provides a callback which returns a `Stream`.\n\nThis would be an issue. The resolve chain would not wait for the gulp.src stream to end before continuing.  \nThis might result in unexpected concurrency and reporting issues.\n\nIt's important to wrap streams in a `task.run ->` when being called from within a `.then ->`.\n\n###**Acceptable**\n```coffee\ntask 'copy', ->\n\tgulp.src('src')\n\t.pipe gulp.dest 'dest'\n```\n```coffee\ntask 'build', ->\n\ttask.run 'compile'\n\t.then -> task.run 'copy'\n```\n```coffee\ntask 'build', ->\n\ttask.run 'compile'\n\t.then -> task.run ->\n\t\tgulp.src('src')\n\t\t.pipe gulp.dest 'dest'\n```\n```coffee\ntask 'build', ->\n\ttask.run 'compile'\n\t.then ->\n\t\tsomethingSynchronous()\n```\n```coffee\ntask 'watch', ->\n  task.run 'compile'\n  .then -># Warning: This is over-simplified and potentially problematic.\n          # See \"Watch Example\" below for more info.\n    gulp.watch ['src/**/*.coffee'], -> task.run 'compile'\n```\n###**Not Acceptable**\n```coffee\ntask 'build', ->\n\ttask.run 'compile'\n\t.then ->\n\t\tgulp.src('src')\n\t\t.pipe gulp.dest 'dest'\n```\n\n# Examples\n\n---\n## Semi-Realistic Stream Example\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ncoffee = require 'gulp-coffee'\njade = require 'gulp-jade'\nrimraf = require 'gulp-rimraf'\nPromise = require 'bluebird'\ntask.configure gulp\n\ntask 'refresh', ->\n\ttask.run 'clean'\n\t.then -> task.run 'compile'\n\ntask 'clean', ->\n\tgulp.src 'bin', read: false\n\t.pipe rimraf()\n\ntask 'compile', ->\n\tPromise.all([\n\t\ttask.run 'compile:coffee'\n\t\ttask.run 'compile:jade'\n\t])\n\ntask 'compile:coffee', ->\n  gulp.src \"src/**/*.coffee\"\n  .pipe coffee()\n  .pipe gulp.dest 'bin'\n\ntask 'compile:jade', ->\n  gulp.src \"src/**/*.jade\"\n  .pipe jade()\n  .pipe gulp.dest 'bin'\n\n```\n#### Output\n```console\n$ coffeegulp rebuild\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'rebuild'...\n[task] Running 'rebuild'\n[task] Running 'clean'\n[task] Finished 'clean' in 11.546 ms\n[task] Running 'compile'\n[task] Running 'compile:coffee'\n[task] Running 'compile:jade'\n[task] Finished 'compile:coffee' in 56.239 ms\n[task] Finished 'compile:jade' in 53.605 ms\n[task] Finished 'compile' in 56.998 ms\n[task] Finished 'rebuild' in 69.254 ms\n[gulp] Finished 'rebuild' after 69 ms\n```\n---\n### Hello World\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ntask.configure gulp\n\ntask 'default', ->\n\ttask.run 'hello'\n\ntask 'hello', ->\n\tconsole.log 'Hello World!'\n```\n#### Output\n```console\n$ coffeegulp\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'default'...\n[task] Running 'default'\n[task] Running 'hello'\nHello World!\n[task] Finished 'hello' in 1.244 ms\n[task] Finished 'default' in 1.728 ms\n[gulp] Finished 'default' after 1.91 ms\n```\n---\n### Basic Stream\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ncoffee = require 'gulp-coffee'\ngulp = require 'gulp'\ntask.configure gulp\n\ntask 'compile', ->\n  gulp.src \"src/**/*.coffee\"\n  .pipe coffee()\n  .pipe gulp.dest 'bin'\n```\n#### Output\n```console\n$ coffeegulp compile\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'compile'...\n[task] Running 'compile'\n[task] Finished 'compile' in 22.872 ms\n[gulp] Finished 'compile' after 23 ms\n```\n---\n### Basic `task.watch`\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ncoffee = require 'gulp-coffee'\ngulp = require 'gulp'\ntask.configure gulp\n\ntask 'compile', ->\n  gulp.src \"src/**/*.coffee\"\n  .pipe coffee()\n  .pipe gulp.dest 'bin'\n\ntask 'watch', ->\n  task.run 'compile'\n  .then ->\n    task.watch ['src/**/*.coffee'], -> task.run 'compile'\n```\n#### Output\n```console\n$ coffeegulp watch\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'watch'...\n[task] Running 'watch'\n[task] Running 'compile'\n[task] Finished 'compile' in 14.42 ms\n[task] Finished 'watch' in 20.66 ms\n[gulp] Finished 'watch' after 21 ms\n<MADE CHANGE>\n[task] Running 'compile'\n[task] Finished 'compile' in 3.800 ms\n```\n---\n### Running Tasks in Series / Using Promises\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ntask.configure gulp\nPromise = require 'bluebird'\n\ntask 'series', ->\n\ttask.run 'a'\n\t.then -> task.run 'b'\n\t.then ->\n\t\tconsole.log 'We Are Done'\n\ntask 'a', -> new Promise (resolve, reject)->\n\tsetTimeout ->\n\t\tconsole.log 'Task A!'\n\t\tresolve()\n\t, 1500\n\ntask 'b', -> new Promise (resolve, reject)->\n\tsetTimeout ->\n\t\tconsole.log 'Task B!'\n\t\tresolve()\n\t, 2000\n```\n#### Output\n```console\n$ coffeegulp series\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'series'...\n[task] Running 'series'\n[task] Running 'a'\nTask A!\n[task] Finished 'a' in 1.502 s\n[task] Running 'b'\nTask B!\n[task] Finished 'b' in 2.001 s\nWe Are Done\n[task] Finished 'series' in 3.504 s\n[gulp] Finished 'series' after 3.5 s\n```\n### Running Tasks in Parallel / Using Promises\n#### gulpfile.coffee\n```coffee\ntask = require 'gulp-task'\ngulp = require 'gulp'\ntask.configure gulp\nPromise = require 'bluebird'\n\ntask 'parallel', ->\n\tPromise.all([\n\t\ttask.run 'a'\n\t\ttask.run 'b'\n\t]).then ->\n\t\tconsole.log 'We Are Done'\n\ntask 'a', -> new Promise (resolve, reject)->\n\tsetTimeout ->\n\t\tconsole.log 'Task A!'\n\t\tresolve()\n\t, 1500\n\ntask 'b', -> new Promise (resolve, reject)->\n\tsetTimeout ->\n\t\tconsole.log 'Task B!'\n\t\tresolve()\n\t, 2000\n```\n#### Output\n```console\n$ coffeegulp parallel\n[gulp] Using gulpfile ~/Documents/GitProjects/gulp-task/gulpfile.coffee\n[gulp] Starting 'parallel'...\n[task] Running 'parallel'\n[task] Running 'a'\n[task] Running 'b'\nTask A!\n[task] Finished 'a' in 1.502 s\nTask B!\n[task] Finished 'b' in 2.002 s\nWe Are Done\n[task] Finished 'parallel' in 2.003 s\n[gulp] Finished 'parallel' after 2 s\n```\n",
  "readmeFilename": "README.md",
  "_id": "gulp-task@2.0.2",
  "dist": {
    "shasum": "7a7241a678786acff0a914bc3f5227c00af3d31c"
  },
  "_from": "gulp-task@",
  "_resolved": "https://registry.npmjs.org/gulp-task/-/gulp-task-2.0.2.tgz"
}
